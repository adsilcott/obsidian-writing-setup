/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WordCountPropertyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  propertyName: "word_count"
};
var WordCountPropertyPlugin = class extends import_obsidian.Plugin {
  async UpdateCount(file) {
    var _a;
    let fm = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
    if (fm && this.settings.propertyName in fm) {
      let text = await this.app.vault.read(file);
      //let count = text.replace(/---[\S\s]*?---/, "").split(/\b\w+\b/g).length - 1;
      let count = text.replace(/---[\S\s]*?---/, "").match(/\S+/g).length;
      this.app.fileManager.processFrontMatter(file, async (frontmatter) => {
        frontmatter[this.settings.propertyName] = count;
      });
    }
  }
  async onload() {
    await this.loadSettings();
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(this.app.workspace.on("active-leaf-change", async (leaf) => {
        const file = this.previousFile;
        this.previousFile = this.app.workspace.getActiveFile();
        if (file)
          this.UpdateCount(file);
      }));
      this.addCommand({
        id: "update-word-count",
        name: "Update Word Count",
        editorCallback: (editor, view) => {
          const file = this.app.workspace.getActiveFile();
          if (file)
            this.UpdateCount(file);
        }
      });
      this.addSettingTab(new SettingTab(this.app, this));
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Property Name").setDesc("Only notes with this property already added will be updated").addText((text) => text.setPlaceholder("word_count").setValue(this.plugin.settings.propertyName).onChange(async (value) => {
      this.plugin.settings.propertyName = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIGVkaXRvckVkaXRvckZpZWxkLCBNYXJrZG93blZpZXcsIE1ldGFkYXRhQ2FjaGUsIE1vZGFsLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgVEZpbGUsIFdvcmtzcGFjZUxlYWYgfSBmcm9tICdvYnNpZGlhbic7XHJcblxyXG5pbnRlcmZhY2UgV29yZENvdW50UHJvcGVydHlTZXR0aW5ncyB7XHJcblx0cHJvcGVydHlOYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFdvcmRDb3VudFByb3BlcnR5U2V0dGluZ3MgPSB7XHJcblx0cHJvcGVydHlOYW1lOiAnd29yZF9jb3VudCdcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29yZENvdW50UHJvcGVydHlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xyXG5cdHNldHRpbmdzOiBXb3JkQ291bnRQcm9wZXJ0eVNldHRpbmdzO1xyXG5cclxuXHRwcml2YXRlIHByZXZpb3VzRmlsZTogVEZpbGUgfCBudWxsO1xyXG5cclxuXHRhc3luYyBVcGRhdGVDb3VudChmaWxlOlRGaWxlKSB7XHJcblx0XHRsZXQgZm0gPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XHJcblx0XHRpZiAoZm0gJiYgdGhpcy5zZXR0aW5ncy5wcm9wZXJ0eU5hbWUgaW4gZm0pXHJcblx0XHR7XHJcblx0XHRcdGxldCB0ZXh0ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcclxuXHRcdFx0Ly9TaW5jZSB3ZSBhbHJlYWR5IGtub3cgdGhlIGZpbGUgaGFzIGZyb250bWF0dGVyLCB3ZSBjYW4gc2ltcGx5IHJlbW92ZSBldmVyeXRoaW5nIGJldHdlZW4gdGhlIGZpcnN0IHR3byAtLS1cclxuXHRcdFx0bGV0IGNvdW50ID0gdGV4dC5yZXBsYWNlKC8tLS1bXFxTXFxzXSo/LS0tLywgXCJcIikuc3BsaXQoL1xcYlxcdytcXGIvZykubGVuZ3RoIC0gMTsgLy8vXi0tLS4qP1xcbi0tLVxcbi9zXHJcblx0XHRcdHRoaXMuYXBwLmZpbGVNYW5hZ2VyLnByb2Nlc3NGcm9udE1hdHRlcihmaWxlLCBhc3luYyAoZnJvbnRtYXR0ZXIpID0+IHtmcm9udG1hdHRlclt0aGlzLnNldHRpbmdzLnByb3BlcnR5TmFtZV0gPSBjb3VudH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeSgoKSA9PiB7XHJcblxyXG5cdFx0XHQvL09uIGxlYWYgY2hhbmdlIGNoZWNrIGlmIHRoZSBsYXN0IGZpbGUgd2FzIHZhbGlkXHJcblx0XHRcdHRoaXMucmVnaXN0ZXJFdmVudCh0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2FjdGl2ZS1sZWFmLWNoYW5nZScsIGFzeW5jIChsZWFmKSA9PiB7XHJcblx0XHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMucHJldmlvdXNGaWxlO1xyXG5cdFx0XHRcdHRoaXMucHJldmlvdXNGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuXHRcdFx0XHRpZiAoZmlsZSkgdGhpcy5VcGRhdGVDb3VudChmaWxlKTtcclxuXHRcdFx0fSkpXHJcblx0XHJcblx0XHRcdC8vIENvbW1hbmQgdG8gbWFudWFsbHkgdXBkYXRlIHdvcmQgY291bnRcclxuXHRcdFx0dGhpcy5hZGRDb21tYW5kKHtcclxuXHRcdFx0XHRpZDogJ3VwZGF0ZS13b3JkLWNvdW50JyxcclxuXHRcdFx0XHRuYW1lOiAnVXBkYXRlIFdvcmQgQ291bnQnLFxyXG5cdFx0XHRcdGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3QgZmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XHJcblx0XHRcdFx0XHRpZiAoZmlsZSkgdGhpcy5VcGRhdGVDb3VudChmaWxlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRcclxuXHRcdFx0Ly8gVGhpcyBhZGRzIGEgc2V0dGluZ3MgdGFiIHNvIHRoZSB1c2VyIGNhbiBjb25maWd1cmUgdmFyaW91cyBhc3BlY3RzIG9mIHRoZSBwbHVnaW5cclxuXHRcdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblxyXG5cdH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxufVxyXG5cclxuY2xhc3MgU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xyXG5cdHBsdWdpbjogV29yZENvdW50UHJvcGVydHlQbHVnaW47XHJcblxyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFdvcmRDb3VudFByb3BlcnR5UGx1Z2luKSB7XHJcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XHJcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuXHR9XHJcblxyXG5cdGRpc3BsYXkoKTogdm9pZCB7XHJcblx0XHRjb25zdCB7Y29udGFpbmVyRWx9ID0gdGhpcztcclxuXHJcblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xyXG5cclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnUHJvcGVydHkgTmFtZScpXHJcblx0XHRcdC5zZXREZXNjKCdPbmx5IG5vdGVzIHdpdGggdGhpcyBwcm9wZXJ0eSBhbHJlYWR5IGFkZGVkIHdpbGwgYmUgdXBkYXRlZCcpXHJcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4gdGV4dFxyXG5cdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignd29yZF9jb3VudCcpXHJcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnByb3BlcnR5TmFtZSlcclxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm9wZXJ0eU5hbWUgPSB2YWx1ZTtcclxuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xyXG5cdFx0XHRcdH0pKTtcclxuXHR9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUFvSjtBQU1wSixJQUFNLG1CQUE4QztBQUFBLEVBQ25ELGNBQWM7QUFDZjtBQUVBLElBQXFCLDBCQUFyQixjQUFxRCx1QkFBTztBQUFBLEVBSzNELE1BQU0sWUFBWSxNQUFZO0FBZi9CO0FBZ0JFLFFBQUksTUFBSyxVQUFLLElBQUksY0FBYyxhQUFhLElBQUksTUFBeEMsbUJBQTJDO0FBQ3BELFFBQUksTUFBTSxLQUFLLFNBQVMsZ0JBQWdCLElBQ3hDO0FBQ0MsVUFBSSxPQUFPLE1BQU0sS0FBSyxJQUFJLE1BQU0sS0FBSyxJQUFJO0FBRXpDLFVBQUksUUFBUSxLQUFLLFFBQVEsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLFVBQVUsRUFBRSxTQUFTO0FBQzFFLFdBQUssSUFBSSxZQUFZLG1CQUFtQixNQUFNLE9BQU8sZ0JBQWdCO0FBQUMsb0JBQVksS0FBSyxTQUFTLFlBQVksSUFBSTtBQUFBLE1BQUssQ0FBQztBQUFBLElBQ3ZIO0FBQUEsRUFDRDtBQUFBLEVBRUEsTUFBTSxTQUFTO0FBQ2QsVUFBTSxLQUFLLGFBQWE7QUFFeEIsU0FBSyxJQUFJLFVBQVUsY0FBYyxNQUFNO0FBR3RDLFdBQUssY0FBYyxLQUFLLElBQUksVUFBVSxHQUFHLHNCQUFzQixPQUFPLFNBQVM7QUFDOUUsY0FBTSxPQUFPLEtBQUs7QUFDbEIsYUFBSyxlQUFlLEtBQUssSUFBSSxVQUFVLGNBQWM7QUFDckQsWUFBSTtBQUFNLGVBQUssWUFBWSxJQUFJO0FBQUEsTUFDaEMsQ0FBQyxDQUFDO0FBR0YsV0FBSyxXQUFXO0FBQUEsUUFDZixJQUFJO0FBQUEsUUFDSixNQUFNO0FBQUEsUUFDTixnQkFBZ0IsQ0FBQyxRQUFnQixTQUF1QjtBQUN2RCxnQkFBTSxPQUFPLEtBQUssSUFBSSxVQUFVLGNBQWM7QUFDOUMsY0FBSTtBQUFNLGlCQUFLLFlBQVksSUFBSTtBQUFBLFFBQ2hDO0FBQUEsTUFDRCxDQUFDO0FBR0QsV0FBSyxjQUFjLElBQUksV0FBVyxLQUFLLEtBQUssSUFBSSxDQUFDO0FBQUEsSUFDbEQsQ0FBQztBQUFBLEVBQ0Y7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUVYO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDcEIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ3BCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ2xDO0FBQ0Q7QUFFQSxJQUFNLGFBQU4sY0FBeUIsaUNBQWlCO0FBQUEsRUFHekMsWUFBWSxLQUFVLFFBQWlDO0FBQ3RELFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2Y7QUFBQSxFQUVBLFVBQWdCO0FBQ2YsVUFBTSxFQUFDLFlBQVcsSUFBSTtBQUV0QixnQkFBWSxNQUFNO0FBRWxCLFFBQUksd0JBQVEsV0FBVyxFQUNyQixRQUFRLGVBQWUsRUFDdkIsUUFBUSw2REFBNkQsRUFDckUsUUFBUSxVQUFRLEtBQ2YsZUFBZSxZQUFZLEVBQzNCLFNBQVMsS0FBSyxPQUFPLFNBQVMsWUFBWSxFQUMxQyxTQUFTLE9BQU8sVUFBVTtBQUMxQixXQUFLLE9BQU8sU0FBUyxlQUFlO0FBQ3BDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNoQyxDQUFDLENBQUM7QUFBQSxFQUNMO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
